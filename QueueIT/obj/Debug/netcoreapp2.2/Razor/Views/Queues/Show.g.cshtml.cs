#pragma checksum "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "515418e8b936d2e25469b590d340ea7429fde9dd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Queues_Show), @"mvc.1.0.view", @"/Views/Queues/Show.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Queues/Show.cshtml", typeof(AspNetCore.Views_Queues_Show))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\_ViewImports.cshtml"
using QueueIT;

#line default
#line hidden
#line 2 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\_ViewImports.cshtml"
using QueueIT.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"515418e8b936d2e25469b590d340ea7429fde9dd", @"/Views/Queues/Show.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a2b9037ae191d3126dbedb9a3d664eaf95b9523a", @"/Views/_ViewImports.cshtml")]
    public class Views_Queues_Show : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<QueueShowViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "DeleteTask", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Queues", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "POST", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(27, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
  
    ViewBag.Title = @Model.CurrentQueue.Title;
    Layout = "_LoggedInLayout";

#line default
#line hidden
            BeginContext(117, 124, true);
            WriteLiteral("<div id=\"alert_placeholder\">\r\n\r\n</div>\r\n\r\n<br/><br/>\r\n<div class=\"container-row\">\r\n    <h4 class=\"display-6 secondary-text\">");
            EndContext();
            BeginContext(242, 24, false);
#line 13 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                                    Write(Model.CurrentQueue.Title);

#line default
#line hidden
            EndContext();
            BeginContext(266, 35, true);
            WriteLiteral(" | \r\n        <a id=\"team-name-link\"");
            EndContext();
            BeginWriteAttribute("href", " href=\"", 301, "\"", 341, 2);
            WriteAttributeValue("", 308, "/Teams/Show/", 308, 12, true);
#line 14 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 320, Model.CurrentTeam.Id, 320, 21, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(342, 1, true);
            WriteLiteral(">");
            EndContext();
            BeginContext(344, 22, false);
#line 14 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                                                                   Write(Model.CurrentTeam.Name);

#line default
#line hidden
            EndContext();
            BeginContext(366, 29, true);
            WriteLiteral("</a> \r\n        |&nbsp;</h4>\r\n");
            EndContext();
#line 16 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
     if (Model.CurrentQueue.IsPrivate)
    {

#line default
#line hidden
            BeginContext(442, 183, true);
            WriteLiteral("        <h4 class=\"display-6 secondary-text\">\r\n            <span>Private</span>\r\n        </h4>\r\n        <img class=\"lock\" src=\"https://img.icons8.com/ios/50/000000/lock.png\" alt=\"\">\r\n");
            EndContext();
#line 22 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
    }
    else
    {

#line default
#line hidden
            BeginContext(649, 184, true);
            WriteLiteral("        <h4 class=\"display-6 secondary-text\">\r\n            <span>Public</span>\r\n        </h4>\r\n        <img class=\"lock\" src=\"https://img.icons8.com/ios/50/000000/unlock.png\" alt=\"\">\r\n");
            EndContext();
#line 29 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
    }

#line default
#line hidden
            BeginContext(840, 198, true);
            WriteLiteral("</div>\r\n<div class=\"kanban\" id=\"kanban\">\r\n    <div class=\"kanban-col shadow\" id=\"todo-col\">\r\n        <div class=\"kanban-col-header\">Todo</div>\r\n        <div class=\"kanban-col-body\" id=\"todo-body\">\r\n");
            EndContext();
#line 35 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
             foreach (var task in Model.TaskList)
            {
                if (task.Status == 0)
                {

#line default
#line hidden
            BeginContext(1162, 24, true);
            WriteLiteral("                    <div");
            EndContext();
            BeginWriteAttribute("id", " id=\"", 1186, "\"", 1199, 1);
#line 39 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 1191, task.Id, 1191, 8, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(1200, 30, true);
            WriteLiteral(" class=\"kanban-col-item drag\">");
            EndContext();
            BeginContext(1231, 10, false);
#line 39 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                                                               Write(task.Title);

#line default
#line hidden
            EndContext();
            BeginContext(1241, 50, true);
            WriteLiteral("<div class=\"view\">\r\n                            <a");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 1291, "\"", 1328, 4);
            WriteAttributeValue("", 1301, "openModal(", 1301, 10, true);
#line 40 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 1311, task.Id, 1311, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 1319, ",", 1319, 1, true);
            WriteAttributeValue(" ", 1320, "\'view\')", 1321, 8, true);
            EndWriteAttribute();
            BeginContext(1329, 305, true);
            WriteLiteral(@" data-target=""#TaskDetailsViewModal"" data-toggle=""modal"" href=""#TaskDetailsViewModal"">
                                <i class=""fa fa-search grow-secondary""></i>
                            </a>
                        </div>
                        <div class=""edit"">
                            <a");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 1634, "\"", 1671, 4);
            WriteAttributeValue("", 1644, "openModal(", 1644, 10, true);
#line 45 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 1654, task.Id, 1654, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 1662, ",", 1662, 1, true);
            WriteAttributeValue(" ", 1663, "\'edit\')", 1664, 8, true);
            EndWriteAttribute();
            BeginContext(1672, 251, true);
            WriteLiteral(" data-target=\"#TaskDetailsModal\" data-toggle=\"modal\" href=\"#TaskDetailsModal\">\r\n                                <i class=\"fa fa-pencil grow-secondary\"></i>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n");
            EndContext();
#line 50 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                }
            }

#line default
#line hidden
            BeginContext(1957, 779, true);
            WriteLiteral(@"        </div>
        <div class=""kanban-col-footer"" id=""todo-footer"">
            <button class=""add-task"" id=""add-task"" onclick=""addTask()"">
                <span class=""thick-plus"">&#43</span> Add Task
            </button>
            <button class=""my-btn my-btn-secondary grow-secondary"" id=""create-task"" hidden=""true"" onclick=""createTask()"">
                Create Task
            </button>
            <button type=""button"" id=""close-btn"" hidden=""true"" class=""close grow-secondary"" onclick=""cancelTask()"">
                <span class=""primary-text"">&times;</span>
            </button>
        </div>
    </div>
    <div class=""kanban-col shadow"">
        <div class=""kanban-col-header"">Doing</div>
        <div class=""kanban-col-body"" id=""doing-body"">
");
            EndContext();
#line 68 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
             foreach (var task in Model.TaskList)
            {
                if (task.Status == 1)
                {

#line default
#line hidden
            BeginContext(2860, 24, true);
            WriteLiteral("                    <div");
            EndContext();
            BeginWriteAttribute("id", " id=\"", 2884, "\"", 2897, 1);
#line 72 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 2889, task.Id, 2889, 8, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(2898, 30, true);
            WriteLiteral(" class=\"kanban-col-item drag\">");
            EndContext();
            BeginContext(2929, 10, false);
#line 72 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                                                               Write(task.Title);

#line default
#line hidden
            EndContext();
            BeginContext(2939, 50, true);
            WriteLiteral("<div class=\"view\">\r\n                            <a");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 2989, "\"", 3026, 4);
            WriteAttributeValue("", 2999, "openModal(", 2999, 10, true);
#line 73 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 3009, task.Id, 3009, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 3017, ",", 3017, 1, true);
            WriteAttributeValue(" ", 3018, "\'view\')", 3019, 8, true);
            EndWriteAttribute();
            BeginContext(3027, 305, true);
            WriteLiteral(@" data-target=""#TaskDetailsViewModal"" data-toggle=""modal"" href=""#TaskDetailsViewModal"">
                                <i class=""fa fa-search grow-secondary""></i>
                            </a>
                        </div>
                        <div class=""edit"">
                            <a");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 3332, "\"", 3369, 4);
            WriteAttributeValue("", 3342, "openModal(", 3342, 10, true);
#line 78 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 3352, task.Id, 3352, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 3360, ",", 3360, 1, true);
            WriteAttributeValue(" ", 3361, "\'edit\')", 3362, 8, true);
            EndWriteAttribute();
            BeginContext(3370, 251, true);
            WriteLiteral(" data-target=\"#TaskDetailsModal\" data-toggle=\"modal\" href=\"#TaskDetailsModal\">\r\n                                <i class=\"fa fa-pencil grow-secondary\"></i>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n");
            EndContext();
#line 83 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                }
            }

#line default
#line hidden
            BeginContext(3655, 170, true);
            WriteLiteral("        </div>\r\n    </div>\r\n    <div class=\"kanban-col shadow\">\r\n        <div class=\"kanban-col-header\">Done</div>\r\n        <div class=\"kanban-col-body\" id=\"done-body\">\r\n");
            EndContext();
#line 90 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
             foreach (var task in Model.TaskList)
            {
                if (task.Status == 2)
                {

#line default
#line hidden
            BeginContext(3949, 24, true);
            WriteLiteral("                    <div");
            EndContext();
            BeginWriteAttribute("id", " id=\"", 3973, "\"", 3986, 1);
#line 94 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 3978, task.Id, 3978, 8, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(3987, 30, true);
            WriteLiteral(" class=\"kanban-col-item drag\">");
            EndContext();
            BeginContext(4018, 10, false);
#line 94 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                                                               Write(task.Title);

#line default
#line hidden
            EndContext();
            BeginContext(4028, 50, true);
            WriteLiteral("<div class=\"view\">\r\n                            <a");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 4078, "\"", 4115, 4);
            WriteAttributeValue("", 4088, "openModal(", 4088, 10, true);
#line 95 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 4098, task.Id, 4098, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 4106, ",", 4106, 1, true);
            WriteAttributeValue(" ", 4107, "\'view\')", 4108, 8, true);
            EndWriteAttribute();
            BeginContext(4116, 305, true);
            WriteLiteral(@" data-target=""#TaskDetailsViewModal"" data-toggle=""modal"" href=""#TaskDetailsViewModal"">
                                <i class=""fa fa-search grow-secondary""></i>
                            </a>
                        </div>
                        <div class=""edit"">
                            <a");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 4421, "\"", 4458, 4);
            WriteAttributeValue("", 4431, "openModal(", 4431, 10, true);
#line 100 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 4441, task.Id, 4441, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 4449, ",", 4449, 1, true);
            WriteAttributeValue(" ", 4450, "\'edit\')", 4451, 8, true);
            EndWriteAttribute();
            BeginContext(4459, 251, true);
            WriteLiteral(" data-target=\"#TaskDetailsModal\" data-toggle=\"modal\" href=\"#TaskDetailsModal\">\r\n                                <i class=\"fa fa-pencil grow-secondary\"></i>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n");
            EndContext();
#line 105 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                }
            }

#line default
#line hidden
            BeginContext(4744, 193, true);
            WriteLiteral("        </div>\r\n    </div>\r\n    <div class=\"kanban-col shadow\" id=\"blocked-col\">\r\n        <div class=\"kanban-col-header\">Blocked</div>\r\n        <div class=\"kanban-col-body\" id=\"blocked-body\">\r\n");
            EndContext();
#line 112 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
             foreach (var task in Model.TaskList)
            {
                if (task.Status == 3)
                {

#line default
#line hidden
            BeginContext(5061, 24, true);
            WriteLiteral("                    <div");
            EndContext();
            BeginWriteAttribute("id", " id=\"", 5085, "\"", 5098, 1);
#line 116 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 5090, task.Id, 5090, 8, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(5099, 30, true);
            WriteLiteral(" class=\"kanban-col-item drag\">");
            EndContext();
            BeginContext(5130, 10, false);
#line 116 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                                                               Write(task.Title);

#line default
#line hidden
            EndContext();
            BeginContext(5140, 50, true);
            WriteLiteral("<div class=\"view\">\r\n                            <a");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 5190, "\"", 5227, 4);
            WriteAttributeValue("", 5200, "openModal(", 5200, 10, true);
#line 117 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 5210, task.Id, 5210, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 5218, ",", 5218, 1, true);
            WriteAttributeValue(" ", 5219, "\'view\')", 5220, 8, true);
            EndWriteAttribute();
            BeginContext(5228, 331, true);
            WriteLiteral(@" data-target=""#TaskDetailsViewModal"" data-toggle=""modal"" href=""#TaskDetailsViewModal"">
                                <i class=""fa fa-search grow-secondary""></i>
                            </a>
                        </div>
                        
                        <div class=""edit"">
                            <a");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 5559, "\"", 5596, 4);
            WriteAttributeValue("", 5569, "openModal(", 5569, 10, true);
#line 123 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
WriteAttributeValue("", 5579, task.Id, 5579, 8, false);

#line default
#line hidden
            WriteAttributeValue("", 5587, ",", 5587, 1, true);
            WriteAttributeValue(" ", 5588, "\'edit\')", 5589, 8, true);
            EndWriteAttribute();
            BeginContext(5597, 251, true);
            WriteLiteral(" data-target=\"#TaskDetailsModal\" data-toggle=\"modal\" href=\"#TaskDetailsModal\">\r\n                                <i class=\"fa fa-pencil grow-secondary\"></i>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n");
            EndContext();
#line 128 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                }
            }

#line default
#line hidden
            BeginContext(5882, 1608, true);
            WriteLiteral(@"        </div>
    </div>
</div>

<div class=""modal fade"" id=""TaskDetailsModal"" tabindex=""-1"" role=""dialog""
     aria-labelledby=""TaskDetailsModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content background-grey"">
            <div class=""modal-header"">
                <h4 class=""modal-title secondary-text"" id=""TaskDetailsModalLabel"">Edit Task Details</h4>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""close"">
                    <span aria-hidden=""true"" class=""primary-text"">&times;</span>
                    <span class=""sr-only"">Close</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div class=""form-group"">
                    <input id=""modalTaskId"" hidden=""true"" value=""""/>
                    <label for=""modalTaskTitle"" class=""secondary-text"">Title</label>
                    <input id=""modalTaskTitle"" class=""form-control modal-input"" pla");
            WriteLiteral(@"ceholder=""Enter a title for your task""/>
                    <label for=""modalTaskDesc"" class=""secondary-text"">Description (optional)</label>
                    <textarea id=""modalTaskDesc"" class=""form-control modal-input"" placeholder=""Brief Description of your task""></textarea>
                    <label for=""modalDueDatePicker"" class=""secondary-text"">Due Date (optional)</label><br/>
                    <input type=""date"" class=""modal-input date"" id=""modalDueDatePicker""/>
                </div>
            </div>
            <div class=""modal-footer"">
                ");
            EndContext();
            BeginContext(7490, 549, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "515418e8b936d2e25469b590d340ea7429fde9dd23125", async() => {
                BeginContext(7558, 474, true);
                WriteLiteral(@"
                    <div class=""btn-group"">
                        <button type=""button"" class=""btn my-btn-group-success"" data-dismiss=""modal"" id=""modalSaveTask"">Save</button>
                        <input hidden id=""hiddenTaskId"" name=""taskIdDel""/>
                        <input hidden id=""hiddenQueueId"" name=""queueIdDel""/>
                        <button type=""submit"" class=""btn my-btn-group-danger"">Delete</button>
                    </div>
                ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(8039, 1451, true);
            WriteLiteral(@"
            </div>
        </div>
    </div>
</div>

<div class=""modal fade"" id=""TaskDetailsViewModal"" tabindex=""-1"" role=""dialog""
     aria-labelledby=""TaskDetailsViewModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content background-grey"">
            <div class=""modal-header"">
                <h4 class=""modal-title secondary-text"" id=""TaskDetailsViewModalLabel"">View Task Details</h4>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""close"">
                    <span aria-hidden=""true"" class=""primary-text"">&times;</span>
                    <span class=""sr-only"">Close</span>
                </button>
            </div>
            <div class=""modal-body"">
                <label for=""task-title"" class=""secondary-text"">Title</label>
                <h4 id=""task-title"" class=""primary-text display-7""></h4>
                <label for=""task-desc"" class=""secondary-text"">Description</label>
            ");
            WriteLiteral(@"    <h4 id=""task-desc"" class=""primary-text display-8""></h4>
                <label for=""task-due"" class=""secondary-text"">Due Date</label>
                <h4 id=""task-due"" class=""primary-text display-9""></h4>
            </div>
            <div class=""modal-footer"">
                <small class=""disabled-text"">Click the pencil icon to edit this task.</small>
            </div>
        </div>
    </div>
</div>


");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(9508, 3058, true);
                WriteLiteral(@"
    <script src=""https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"" type=""text/javascript"">
    </script>
    <script type=""text/javascript"">
        function addTask() {
            // grab elements
            var addTaskBtn = document.getElementById('add-task');
            var createTaskBtn = document.getElementById('create-task');
            var footer = document.getElementById('todo-footer');
            var closeBtn = document.getElementById('close-btn');

            // hide add task btn
            addTaskBtn.hidden = true;

            // add an input field
            var input = document.createElement('input');
            input.id = 'new-task';
            input.placeholder = ""Enter a title for this task"";
            input.classList.add('new-task');
            footer.insertBefore(input, footer.childNodes[0]);
            input.focus();

            // reveal hidden buttons
            createTaskBtn.hidden = false;
            closeBtn.hidden = fals");
                WriteLiteral(@"e;
        }

        function cancelTask() {
            // grab elements 
            var addTaskBtn = document.getElementById('add-task');
            var createTaskBtn = document.getElementById('create-task');
            var closeBtn = document.getElementById('close-btn');
            var footer = document.getElementById('todo-footer');
            var newTask = document.getElementById('new-task');

            // hide and reveal buttons
            closeBtn.hidden = true;
            createTaskBtn.hidden = true;
            addTaskBtn.hidden = false;

            // remove the new text field
            footer.removeChild(newTask);
        }

        function createTask() {
            // grab elements 
            var newTask = document.getElementById('new-task');
            if (newTask.value !== """") {
                // create new kanban item
                var $newTaskDiv =
                    $('<div id=""new-item"" class=""drag kanban-col-item new-item"">' +
               ");
                WriteLiteral(@"         newTask.value +
                        '<div class=""view""><a id=""'+ newTask.value +'DetailsViewBtn"" data-target=""#TaskDetailsViewModal"" data-toggle=""modal"" href=""#TaskDetailsViewModal""><i class=""fa fa-search grow-secondary""></i></a></div>' +
                        '<div class=""edit""><a id=""'+ newTask.value +'DetailsBtn"" data-target=""#TaskDetailsModal"" data-toggle=""modal"" href=""#TaskDetailsModal""><i class=""fa fa-pencil grow-secondary""></i></a></div></div>');


                var task = newTask.value;
                if (task) {
                    $.ajax({
                        type: 'post',
                        url: '/Queues/CreateTask',
                        beforeSend: function(req) {
                            req.setRequestHeader('Content-Type', 'application/json');
                        },
                        data: JSON.stringify(
                            {
                                taskTitle: task,
                                queueId: ");
                EndContext();
                BeginContext(12567, 21, false);
#line 264 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                                    Write(Model.CurrentQueue.Id);

#line default
#line hidden
                EndContext();
                BeginContext(12588, 47, true);
                WriteLiteral(",\r\n                                CreatorId: \'");
                EndContext();
                BeginContext(12636, 19, false);
#line 265 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                                       Write(Model.CurrentUserId);

#line default
#line hidden
                EndContext();
                BeginContext(12655, 3017, true);
                WriteLiteral(@"',
                                Status: 0
                            }),
                        success: function(taskId) {
                            if (taskId === -1) {
                                showAlert(""Task already exists. Enter a unique name"", ""alert-danger"");

                            } else {
                                $newTaskDiv.id = taskId;
                                $('#todo-body').append($newTaskDiv);
                                document.getElementById('new-item').setAttribute(""id"", taskId);
                                document.getElementById(newTask.value + 'DetailsBtn')
                                    .setAttribute(""onclick"", ""openModal("" + taskId + "", 'edit')"");
                                document.getElementById(newTask.value + 'DetailsViewBtn')
                                    .setAttribute(""onclick"", ""openModal("" + taskId + "", 'view')"");
                                newTask.value = """";
                                $newTaskD");
                WriteLiteral(@"iv.draggable({ stack: "".drag"" });
                                $newTaskDiv.draggable({
                                    revert: function(event, ui) {
                                        $(this).data(""uiDraggable"").originalPosition = {
                                            top: 0,
                                            left: 0
                                        };

                                        return !event;
                                    }
                                });
                            }
                        }
                    });
                }
            }
        }

        function openModal(taskId, modalType) {
            $.ajax({
                type: 'get',
                url: '/Queues/DetailModal',
                beforeSend: function(req) {
                    req.setRequestHeader('Content-type', 'application/json');
                },
                data: { taskId: taskId },
                success: fun");
                WriteLiteral(@"ction(data) {

                    if (modalType === ""edit"") {
                        if (data.dueOn != null) {
                            var date = new Date(data.dueOn);
                            var dd = date.getDate();
                            var mm = date.getMonth() + 1;

                            var yyyy = date.getFullYear();
                            if (dd < 10) {
                                dd = '0' + dd;
                            }
                            if (mm < 10) {
                                mm = '0' + mm;
                            }
                            date = yyyy + '-' + mm + '-' + dd;

                            $('#modalDueDatePicker').val(date);
                        } else {
                            $('#modalDueDatePicker').val(data.dueOn);
                        }
                        $('#hiddenTaskId').val(data.id);
                        $('#hiddenQueueId').val(");
                EndContext();
                BeginContext(15673, 21, false);
#line 329 "C:\Users\alexb\RiderProjects\QueueIT\QueueIT\Views\Queues\Show.cshtml"
                                           Write(Model.CurrentQueue.Id);

#line default
#line hidden
                EndContext();
                BeginContext(15694, 5416, true);
                WriteLiteral(@");
                        $('#modalTaskId').val(data.id);
                        $('#modalTaskTitle').val(data.title);
                        $('#modalTaskDesc').val(data.description);
                        $('#modalSaveTask').attr(""onclick"", ""saveTask()"");
                    } else if (modalType === ""view"") {
                        if (data.dueOn != null) {
                            var date = new Date(data.dueOn);
                            var dd = date.getDate();
                            var mm = date.getMonth() + 1;

                            var yyyy = date.getFullYear();
                            if (dd < 10) {
                                dd = '0' + dd;
                            }
                            if (mm < 10) {
                                mm = '0' + mm;
                            }
                            date = yyyy + '-' + mm + '-' + dd;

                            $('#task-due').text(date);
                        } else {
          ");
                WriteLiteral(@"                  $('#task-due').text(data.dueOn);
                        }
                        $('#task-title').text(data.title);
                        $('#task-desc').text(data.description);
                    }
                }
            });
        }

        function showAlert(message, alertType) {

            $('#alert_placeholder').append('<div id=""alertDiv"" class=""fade show alert ' +
                alertType +
                '""><a class=""close"" data-dismiss=""alert"">&times;</a><span>' +
                message +
                '</span></div>');

            setTimeout(
                function() { // this will automatically close the alert and remove this if the users doesnt close it in 5 secs
                    $(""#alertDiv"").remove();
                },
                5000);
        }

        function saveTask() {
            $.ajax({
                type: 'post',
                url: '/Queues/DetailModal',
                beforeSend: function(req) {
   ");
                WriteLiteral(@"                 req.setRequestHeader('Content-type', 'application/json');
                },
                data: JSON.stringify({
                    taskId: $('#modalTaskId').val(),
                    newTaskTitle: $('#modalTaskTitle').val(),
                    newTaskDesc: $('#modalTaskDesc').val() || """",
                    newTaskDueOn: $('#modalDueDatePicker').val()
                }),
                success: function(resp) {
                    if (resp === -1) {
                        showAlert(""Task does not exist."", ""alert-danger"");
                    }
                    document.getElementById(resp).innerHTML = $('#modalTaskTitle').val() + 
                        '<div class=""view""><a id=""'+ $('#modalTaskTitle').val() +'DetailsViewBtn"" data-target=""#TaskDetailsViewModal"" data-toggle=""modal"" href=""#TaskDetailsViewModal""><i class=""fa fa-search grow-secondary""></i></a></div>' +
                    '<div class=""edit""><a id=""'+ $('#modalTaskTitle').val() +'DetailsBtn"" data-target");
                WriteLiteral(@"=""#TaskDetailsModal"" data-toggle=""modal"" href=""#TaskDetailsModal""><i class=""fa fa-pencil grow-secondary""></i></a></div></div>';
                    
                    showAlert(""Task saved!"", ""alert-success"");
                },
                error: function() {
                    showAlert(""Error in saving Task"", ""alert-danger"");
                }
            });
        }

        $(""#todo-footer"").keyup(function(event) {
            switch (event.keyCode) {
            case 13:
                createTask();
                break;
            case 27:
                cancelTask();
                break;
            default:
                break;
            }
        });

        $('.drag').draggable();

        $("".kanban-col-body"").droppable({
            accept: "".drag"",
            drop: function(event, ui) {
                var droppable = $(this);
                var draggable = ui.draggable;
                // move draggable into droppable
                draggabl");
                WriteLiteral(@"e.appendTo(droppable);
                var statusCode = getTaskStatus(droppable);
                console.dir(draggable);

                updateTaskStatus(statusCode, draggable[0].id);

                draggable.css({ top: '0px', left: '0px' });
            }
        });

        function getTaskStatus(droppable) {
            switch (droppable[0].id) {
            case 'todo-body':
                return 0;
            case 'doing-body':
                return 1;
            case 'done-body':
                return 2;
            case 'blocked-body':
                return 3;
            default:
                return -1;
            }
        }

        function updateTaskStatus(status, taskId) {
            console.log(""in updateTaskStatus. status:"" + status + "" Taskid:"" + taskId);
            $.ajax({
                type: 'post',
                url: '/Queues/UpdateTaskStatus',
                beforeSend: function(req) {
                    req.setRequestHeader('Content-t");
                WriteLiteral(@"ype', 'application/json');
                },
                data: JSON.stringify({
                    newTaskStatus: status,
                    taskId: taskId
                }),
                success: function() {

                }

            });
        }
    </script>

");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<QueueShowViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
