@model QueueShowViewModel

@{
    ViewBag.Title = @Model.CurrentQueue.Title;
    Layout = "_LoggedInLayout";
}
<div id="alert_placeholder">

</div>

<br/>
@if (@Model.CurrentUserId == Model.CurrentQueue.CreatorId)
{
    <div align="center">
        <button class="my-btn my-btn-primary shadow" style="width: 100px;"
                data-toggle="modal" data-target="#EditQueueModal" aria-hidden="true">
            Edit
        </button>
    </div>
}
<br/>
<div class="container-row">
    <h4 class="display-6 secondary-text">
        @Model.CurrentQueue.Title |
        <a id="team-name-link" href="/Teams/Show/@Model.CurrentTeam.Id">@Model.CurrentTeam.Name</a>
        |&nbsp;
    </h4>
        @if (Model.CurrentQueue.IsPrivate)
        {
            <h4 class="display-6 secondary-text">
                <span>Private</span>
            </h4>
            <img class="lock" src="/lock.png" alt="">
        }
        else
        {
            <h4 class="display-6 secondary-text">
                <span>Public</span>
            </h4>
            <img class="lock" src="/unlock.png" alt="">
        }
    
</div>
<div class="kanban" id="kanban">
    <div class="kanban-col shadow" id="todo-col">
        <div class="kanban-col-header">Todo</div>
        <div class="kanban-col-body" id="todo-body">
            @foreach (var task in Model.TaskList)
            {
                if (task.Status == 0)
                {
                    <div id="@task.Id" class="kanban-col-item drag">
                        @task.Title<div class="view">
                            <a onclick="openModal(@task.Id, 'view')" data-target="#TaskDetailsViewModal" data-toggle="modal" href="#TaskDetailsViewModal">
                                <i class="fa fa-search grow-secondary"></i>
                            </a>
                        </div>
                        <div class="edit">
                            <a onclick="openModal(@task.Id, 'edit')" data-target="#TaskDetailsModal" data-toggle="modal" href="#TaskDetailsModal">
                                <i class="fa fa-pencil grow-secondary"></i>
                            </a>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="kanban-col-footer" id="todo-footer">
            <button class="add-task" id="add-task" onclick="addTask()">
                <span class="thick-plus">&#43</span> Add Task
            </button>
            <button class="my-btn my-btn-secondary grow-secondary" id="create-task" hidden="true" onclick="createTask()">
                Create Task
            </button>
            <button type="button" id="close-btn" hidden="true" class="close grow-secondary" onclick="cancelTask()">
                <span class="primary-text">&times;</span>
            </button>
        </div>
    </div>
    <div class="kanban-col shadow">
        <div class="kanban-col-header">Doing</div>
        <div class="kanban-col-body" id="doing-body">
            @foreach (var task in Model.TaskList)
            {
                if (task.Status == 1)
                {
                    <div id="@task.Id" class="kanban-col-item drag">
                        @task.Title<div class="view">
                            <a onclick="openModal(@task.Id, 'view')" data-target="#TaskDetailsViewModal" data-toggle="modal" href="#TaskDetailsViewModal">
                                <i class="fa fa-search grow-secondary"></i>
                            </a>
                        </div>
                        <div class="edit">
                            <a onclick="openModal(@task.Id, 'edit')" data-target="#TaskDetailsModal" data-toggle="modal" href="#TaskDetailsModal">
                                <i class="fa fa-pencil grow-secondary"></i>
                            </a>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div class="kanban-col shadow">
        <div class="kanban-col-header">Done</div>
        <div class="kanban-col-body" id="done-body">
            @foreach (var task in Model.TaskList)
            {
                if (task.Status == 2)
                {
                    <div id="@task.Id" class="kanban-col-item drag">
                        @task.Title<div class="view">
                            <a onclick="openModal(@task.Id, 'view')" data-target="#TaskDetailsViewModal" data-toggle="modal" href="#TaskDetailsViewModal">
                                <i class="fa fa-search grow-secondary"></i>
                            </a>
                        </div>
                        <div class="edit">
                            <a onclick="openModal(@task.Id, 'edit')" data-target="#TaskDetailsModal" data-toggle="modal" href="#TaskDetailsModal">
                                <i class="fa fa-pencil grow-secondary"></i>
                            </a>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <div class="kanban-col shadow" id="blocked-col">
        <div class="kanban-col-header">Blocked</div>
        <div class="kanban-col-body" id="blocked-body">
            @foreach (var task in Model.TaskList)
            {
                if (task.Status == 3)
                {
                    <div id="@task.Id" class="kanban-col-item drag">
                        @task.Title<div class="view">
                            <a onclick="openModal(@task.Id, 'view')" data-target="#TaskDetailsViewModal" data-toggle="modal" href="#TaskDetailsViewModal">
                                <i class="fa fa-search grow-secondary"></i>
                            </a>
                        </div>

                        <div class="edit">
                            <a onclick="openModal(@task.Id, 'edit')" data-target="#TaskDetailsModal" data-toggle="modal" href="#TaskDetailsModal">
                                <i class="fa fa-pencil grow-secondary"></i>
                            </a>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<div class="modal fade" id="TaskDetailsModal" tabindex="-1" role="dialog"
     aria-labelledby="TaskDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content background-grey">
            <div class="modal-header">
                <h4 class="modal-title secondary-text" id="TaskDetailsModalLabel">Edit Task Details</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="close">
                    <span aria-hidden="true" class="primary-text">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <input id="modalTaskId" hidden="true" value=""/>
                    <label for="modalTaskTitle" class="secondary-text">Title</label>
                    <input id="modalTaskTitle" class="form-control modal-input" placeholder="Enter a title for your task"/>
                    <br/>
                    <label for="modalTaskDesc" class="secondary-text">Description (optional)</label>
                    <textarea id="modalTaskDesc" class="form-control modal-input" placeholder="Brief Description of your task"></textarea>
                    <br/>
                    <label for="task-assignee-container" class="secondary-text">Assign this task to a team member (optional)</label>
                    <div id="task-assignee-container" class="container">
                        <div class="row">
                            <div class="scrollable">
                                <table class="table">
                                    <tbody>
                                    <tr id="teamMembersScroll">
                                        
                                    </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <label for="modalDueDatePicker" class="secondary-text">Due Date (optional)</label><br/>
                    <input type="date" class="modal-input date" id="modalDueDatePicker"/>
                </div>
            </div>
            <div class="modal-footer">
                <form asp-action="DeleteTask" asp-controller="Queues" method="POST">
                    <div class="btn-group">
                        <button type="button" class="btn my-btn-group-success" data-dismiss="modal" id="modalSaveTask">Save</button>
                        <input hidden id="hiddenTaskId" name="taskIdDel"/>
                        <input hidden id="hiddenQueueId" name="queueIdDel"/>
                        <button type="submit" class="btn my-btn-group-danger">Delete</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="TaskDetailsViewModal" tabindex="-1" role="dialog"
     aria-labelledby="TaskDetailsViewModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content background-grey">
            <div class="modal-header">
                <h4 class="modal-title secondary-text" id="TaskDetailsViewModalLabel">View Task Details</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="close">
                    <span aria-hidden="true" class="primary-text">&times;</span>
                    <span class="sr-only">Close</span>
                </button>
            </div>
            <div class="modal-body">
                <h4 id="task-title" class="primary-text display-6"></h4>
                <h4 id="task-desc" class="secondary-text display-8"></h4>
                <h4 id="task-assignee" class="primary-text display-9"></h4>
            </div>
            <div class="modal-footer">
                <small id="task-due" class="disabled-text" style="float: left"></small>
            </div>
        </div>
    </div>
</div>



<div class="modal fade show" id="EditQueueModal" tabindex="-1" role="dialog"
     aria-labelledby="EditQueueModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content background-grey">
            <form asp-action="QueueUpdate" asp-controller="Queues" method="POST">
                <input type="hidden" name="QueueId" value="@Model.CurrentQueue.Id"/>
                <div class="modal-header">
                    <h4 class="modal-title secondary-text" id="EditQueueModalLabel">Edit Queue</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="close">
                        <span aria-hidden="true" class="primary-text">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="q-title" class="secondary-text">Queue Title</label>
                        @if (@Model.CurrentQueue.Title != "Personal Queue")
                        {
                            <input id="q-title" name="QueueTitle" class="modal-input form-control"
                                   value="@Model.CurrentQueue.Title" placeholder="Enter title"/>
                        }
                        else
                        {
                            <input id="q-title-readonly" name="QueueTitle" class="modal-input form-control"
                                   value="@Model.CurrentQueue.Title" placeholder="Enter title" readonly title="Cannot Change Personal Queue Name"/>
                        }
                        
                        
                        <br/>
                        <div class="custom-radio-group" name="QueueVisibilitySelector" aria-describedby="QueueVisibilitySelectorHelp">
                            @if (Model.CurrentQueue.IsPrivate)
                            {
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="QueueVisibility"
                                           id="privateRadio" value="private" checked/>
                                    <label class="form-check-label secondary-text" for="privateRadio">Private</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check form-check-inline" type="radio" name="QueueVisibility"
                                           id="publicRadio" value="public"/>
                                    <label class="form-check-label secondary-text" for="publicRadio">Public</label>
                                </div>
                            }
                            else
                            {
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="QueueVisibility"
                                           id="privateRadio" value="private"/>
                                    <label class="form-check-label secondary-text" for="privateRadio">Private</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check form-check-inline" type="radio" name="QueueVisibility"
                                           id="publicRadio" value="public" checked/>
                                    <label class="form-check-label secondary-text" for="publicRadio">Public</label>
                                </div>
                            }
                            <br/>
                            <small id="QueueVisibilitySelectorHelp" class="primary-text disabled-text" style="margin: 0 0 2px 0;">
                                Public means anyone who visits the team's profile can see this Queue.
                            </small>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="btn-group">
                        <button class="btn my-btn-group-success">Save</button>
                        @if (Model.CurrentQueue.Title != "Personal Queue")
                        {
                            <button type="button" id="del-btn" data-toggle="modal" data-target="#delete-q-modal" class="btn my-btn-danger">Delete</button>
                        }
                        else
                        {
                            <button type="button" id="del-btn" data-toggle="modal" data-target="#delete-q-modal" class="btn" disabled>Delete</button>
                        }
                    </div>
                </div>
            </form>
        </div>

    </div>
</div>

<div class="modal fade show" tabindex="-1" role="dialog" id="delete-q-modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content background-grey">
            <div class="modal-header">
                <h4 class="card-title primary-text">Are you sure you want to delete this Queue and it's associated tasks?</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="primary-text">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <button type="button" style="margin-right: 1px;"id="del-q-btn" onclick="deleteQ(@Model.CurrentQueue.Id)" class="my-btn my-btn-danger"> 
                    Delete Queue
                </button>
                <button type="button" style="margin-left: 0;" class="my-btn my-btn-nonthreat" data-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>





@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js" type="text/javascript">
    </script>
    <script type="text/javascript">

        $('#del-btn').click(function() {
            $('#EditQueueModal').modal('toggle');
        });

        function deleteQ(qId) {
            $.ajax({
                type: 'post',
                url: '/Queues/DeleteQueue',
                beforeSend: function(req) {
                    req.setRequestHeader('Content-Type', 'application/json');
                },
                data: JSON.stringify({ qId: qId }),
                success: function() {
                    window.location.replace('/Account/UserHome');
                }
            });
        }

        function addTask() {
            // grab elements
            var addTaskBtn = document.getElementById('add-task');
            var createTaskBtn = document.getElementById('create-task');
            var footer = document.getElementById('todo-footer');
            var closeBtn = document.getElementById('close-btn');

            // hide add task btn
            addTaskBtn.hidden = true;

            // add an input field
            var input = document.createElement('input');
            input.id = 'new-task';
            input.placeholder = "Enter a title for this task";
            input.classList.add('new-task');
            footer.insertBefore(input, footer.childNodes[0]);
            input.focus();

            // reveal hidden buttons
            createTaskBtn.hidden = false;
            closeBtn.hidden = false;
        }

        function cancelTask() {
            // grab elements 
            var addTaskBtn = document.getElementById('add-task');
            var createTaskBtn = document.getElementById('create-task');
            var closeBtn = document.getElementById('close-btn');
            var footer = document.getElementById('todo-footer');
            var newTask = document.getElementById('new-task');

            // hide and reveal buttons
            closeBtn.hidden = true;
            createTaskBtn.hidden = true;
            addTaskBtn.hidden = false;

            // remove the new text field
            footer.removeChild(newTask);
        }

        function createTask() {
            // grab elements 
            var newTask = document.getElementById('new-task');
            if (newTask.value.length > 50) {
                showAlert("Task Title shouldn't be longer than 50 characters.", "alert-danger");
            } else {
                if (newTask.value !== "") {
                    // create new kanban item
                    var $newTaskDiv =
                        $('<div id="new-item" class="drag kanban-col-item new-item">' +
                            newTask.value +
                            '<div class="view"><a id="' +
                            newTask.value +
                            'DetailsViewBtn" data-target="#TaskDetailsViewModal" data-toggle="modal" href="#TaskDetailsViewModal"><i class="fa fa-search grow-secondary"></i></a></div>' +
                            '<div class="edit"><a id="' +
                            newTask.value +
                            'DetailsBtn" data-target="#TaskDetailsModal" data-toggle="modal" href="#TaskDetailsModal"><i class="fa fa-pencil grow-secondary"></i></a></div></div>');


                    var task = newTask.value;
                    if (task) {
                        $.ajax({
                            type: 'post',
                            url: '/Queues/CreateTask',
                            beforeSend: function(req) {
                                req.setRequestHeader('Content-Type', 'application/json');
                            },
                            data: JSON.stringify(
                                {
                                    taskTitle: task,
                                    queueId: @Model.CurrentQueue.Id,
                                    CreatorId: '@Model.CurrentUserId',
                                    Status: 0
                                }),
                            success: function(taskId) {
                                if (taskId === -1) {
                                    showAlert("Task already exists. Enter a unique name", "alert-danger");

                                } else {
                                    $newTaskDiv.id = taskId;
                                    $('#todo-body').append($newTaskDiv);
                                    document.getElementById('new-item').setAttribute("id", taskId);
                                    document.getElementById(newTask.value + 'DetailsBtn')
                                        .setAttribute("onclick", "openModal(" + taskId + ", 'edit')");
                                    document.getElementById(newTask.value + 'DetailsViewBtn')
                                        .setAttribute("onclick", "openModal(" + taskId + ", 'view')");
                                    newTask.value = "";
                                    $newTaskDiv.draggable({ stack: ".drag" });
                                    $newTaskDiv.draggable({
                                        revert: function(event, ui) {
                                            $(this).data("uiDraggable").originalPosition = {
                                                top: 0,
                                                left: 0
                                            };
                                            return !event;
                                        }
                                    });
                                }
                            }
                        });
                    }
                }
            }
        }

        $(".kanban-col-item").draggable({
            revert: function(event, ui) {
                $(this).data("uiDraggable").originalPosition = {
                    top: 0,
                    left: 0
                };
                return !event;
            }
        });

        function openModal(taskId, modalType) {
            $.ajax({
                type: 'get',
                url: '/Queues/DetailModal',
                beforeSend: function(req) {
                    req.setRequestHeader('Content-type', 'application/json');
                },
                data: { taskId: taskId },
                success: function(data) {
                    console.dir(data);
                    if (modalType === "edit") {
                        if (data.theTask.dueOn != null) {
                            var date = new Date(data.theTask.dueOn);
                            var dd = date.getDate();
                            var mm = date.getMonth() + 1;

                            var yyyy = date.getFullYear();
                            if (dd < 10) {
                                dd = '0' + dd;
                            }
                            if (mm < 10) {
                                mm = '0' + mm;
                            }
                            date = yyyy + '-' + mm + '-' + dd;

                            $('#modalDueDatePicker').val(date);
                        } else {
                            $('#modalDueDatePicker').val(data.theTask.dueOn);
                        }

                        $('#teamMembersScroll').empty();
                        data.teamMembers.forEach(function(member) {

                            var $td = $(
                                '<td><div class="avatar-circle-lg grow-secondary" onclick="assignUser(\'' +
                                member.id +
                                '\',\'' +
                                data.theTask.id +
                                '\')" title="' +
                                member.firstName +
                                " " +
                                member.lastName +
                                '"><span class="initials-lg">' +
                                member.firstName.charAt(0) +
                                member.lastName.charAt(0) +
                                '</span></div></td>'
                            );
                            $('#teamMembersScroll').append($td);
                        });
                        $('#hiddenTaskId').val(data.theTask.id);
                        $('#hiddenQueueId').val(@Model.CurrentQueue.Id);
                        $('#modalTaskId').val(data.theTask.id);
                        $('#modalTaskTitle').val(data.theTask.title);
                        $('#modalTaskDesc').val(data.theTask.description);
                        $('#modalSaveTask').attr("onclick", "saveTask()");
                    } else if (modalType === "view") {
                        if (data.theTask.dueOn != null) {
                            var date = new Date(data.theTask.dueOn);
                            var dd = date.getDate();
                            var mm = date.getMonth() + 1;

                            var yyyy = date.getFullYear();
                            if (dd < 10) {
                                dd = '0' + dd;
                            }
                            if (mm < 10) {
                                mm = '0' + mm;
                            }
                            date = 'Due Date: ' + yyyy + '-' + mm + '-' + dd;

                            $('#task-due').text(date);
                        } else {
                            $('#task-due').text(data.theTask.dueOn);
                        }
                        $('#task-title').text(data.theTask.title);
                        $('#task-desc').text(data.theTask.description);
                        $('#task-assignee').empty();
                        if (data.theTask.assigneeId != null) {
                            var str = "Task assigned to: " + data.name;

                            $('#task-assignee').append(str);
                        }

                    }
                }
            });
        }

        function assignUser(userId, taskId) {
            $.ajax({
                type: 'post',
                url: '/Queues/AssignUserToTask',
                beforeSend: function(req) {
                    req.setRequestHeader('Content-type', 'application/json');
                },
                data: JSON.stringify({
                    userId: userId,
                    taskId: taskId
                }),
                success: function(resp) {
                    $('#TaskDetailsModal').modal('toggle');
                    showAlert("User Assigned to Task!", "alert-success");
                    sendTaskAssignedNotification(resp);
                }
            });
        }

        function sendTaskAssignedNotification(task) {
            $.ajax({
                type: 'post',
                url: '/Queues/SendAssignedTaskNotification',
                beforeSend: function(req) {
                    req.setRequestHeader('Content-type', 'application/json');
                },
                data: JSON.stringify({
                    id: task.id,
                    queueId: task.queueId,
                    title: task.title,
                    description: task.description,
                    creatorId: task.creatorId,
                    assigneeId: task.assigneeId
                }),
                success: function() {
                    showAlert("notification sent", "alert-success");
                }
            });
        };

        function showAlert(message, alertType) {

            $('#alert_placeholder').append('<div id="alertDiv" class="fade show alert ' +
                alertType +
                '"><a class="close" data-dismiss="alert">&times;</a><span>' +
                message +
                '</span></div>');

            setTimeout(
                function() { // this will automatically close the alert and remove this if the users doesnt close it in 5 secs
                    $("#alertDiv").remove();
                },
                5000);
        }

        function saveTask() {
            if ($('#modalTaskTitle').val().length > 50 || $('#modalTaskDesc').val().length > 255) {
                if ($('#modalTaskTitle').val().length > 50) {
                    showAlert("Task Title shouldn't be longer than 50 characters.", "alert-danger");
                }
                if ($('#modalTaskDesc').val().length > 255) {
                    showAlert("Task Description shouldn't be longer than 255 characters.", "alert-danger");
                }
            } else {
                $.ajax({
                    type: 'post',
                    url: '/Queues/DetailModal',
                    beforeSend: function(req) {
                        req.setRequestHeader('Content-type', 'application/json');
                    },
                    data: JSON.stringify({
                        taskId: $('#modalTaskId').val(),
                        newTaskTitle: $('#modalTaskTitle').val(),
                        newTaskDesc: $('#modalTaskDesc').val() || "",
                        newTaskDueOn: $('#modalDueDatePicker').val()
                    }),
                    success: function(resp) {
                        if (resp === -1) {
                            showAlert("Task does not exist.", "alert-danger");
                        }
                        document.getElementById(resp).innerHTML = $('#modalTaskTitle').val() +
                            '<div class="view"><a id="' +
                            $('#modalTaskTitle').val() +
                            'DetailsViewBtn" data-target="#TaskDetailsViewModal" data-toggle="modal" href="#TaskDetailsViewModal"><i class="fa fa-search grow-secondary"></i></a></div>' +
                            '<div class="edit"><a id="' +
                            $('#modalTaskTitle').val() +
                            'DetailsBtn" data-target="#TaskDetailsModal" data-toggle="modal" href="#TaskDetailsModal"><i class="fa fa-pencil grow-secondary"></i></a></div></div>';

                        showAlert("Task saved!", "alert-success");
                    },
                    error: function() {
                        showAlert("Error in saving Task.", "alert-danger");
                    }
                });
            }
        }

        $("#todo-footer").keyup(function(event) {
            switch (event.keyCode) {
            case 13:
                createTask();
                break;
            case 27:
                cancelTask();
                break;
            default:
                break;
            }
        });

        $('.drag').draggable();

        $(".kanban-col-body").droppable({
            accept: ".drag",
            drop: function(event, ui) {
                var droppable = $(this);
                var draggable = ui.draggable;
                // move draggable into droppable
                draggable.appendTo(droppable);
                var statusCode = getTaskStatus(droppable);
                console.dir(draggable);

                updateTaskStatus(statusCode, draggable[0].id);

                draggable.css({ top: '0px', left: '0px' });
            }
        });

        function getTaskStatus(droppable) {
            switch (droppable[0].id) {
            case 'todo-body':
                return 0;
            case 'doing-body':
                return 1;
            case 'done-body':
                return 2;
            case 'blocked-body':
                return 3;
            default:
                return -1;
            }
        }

        function updateTaskStatus(status, taskId) {
            $.ajax({
                type: 'post',
                url: '/Queues/UpdateTaskStatus',
                beforeSend: function(req) {
                    req.setRequestHeader('Content-type', 'application/json');
                },
                data: JSON.stringify({
                    newTaskStatus: status,
                    taskId: taskId
                }),
                success: function() {

                }

            });
        }


    </script>

}

